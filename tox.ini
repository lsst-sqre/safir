[tox]
envlist = py,coverage-report,typing,lint
isolated_build = True

[docker:postgres]
image = postgres:latest
ports =
    5432:5432/tcp
environment =
    POSTGRES_PASSWORD=INSECURE@%PASSWORD/
    POSTGRES_USER=safir
    POSTGRES_DB=safir
    PGPORT=5432
# The healthcheck ensures that tox-docker won't run tests until the
# container is up and the command finishes with exit code 0 (success)
healthcheck_cmd = PGPASSWORD=$POSTGRES_PASSWORD psql \
    --user=$POSTGRES_USER --dbname=$POSTGRES_DB \
    --host=127.0.0.1 --quiet --no-align --tuples-only \
    -1 --command="SELECT 1"
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1

[testenv]
description = Run pytest against {envname}.
extras =
    db
    dev
    kubernetes

[testenv:py]
description = Run pytest with PostgreSQL via Docker.
docker =
    postgres
commands =
    coverage run -m pytest {posargs}
setenv =
    TEST_DATABASE_URL = postgresql://safir@127.0.0.1/safir
    TEST_DATABASE_PASSWORD = INSECURE@%PASSWORD/

[testenv:coverage-report]
description = Compile coverage from each test run.
skip_install = true
deps = coverage[toml]>=5.0.2
depends =
    py
commands =
    coverage combine
    coverage report

[testenv:typing]
description = Run mypy.
commands =
    mypy src/safir tests setup.py

[testenv:lint]
description = Lint codebase by running pre-commit (Black, isort, Flake8).
skip_install = true
deps =
    pre-commit
commands = pre-commit run --all-files

[testenv:docs]
description = Build documentation (HTML) with Sphinx.
commands =
    sphinx-build -W --keep-going -n -T -b html -d {envtmpdir}/doctrees docs docs/_build/html
